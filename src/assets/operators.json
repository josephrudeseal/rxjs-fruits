{
  "Creation Operators": [
    { "operator": "ajax", "desc": "Make an HTTP request.", "url": "https://rxjs.dev/api/index/function/ajax" },
    { "operator": "bindCallback", "desc": "Convert a callback API to an observable.", "url": "https://rxjs.dev/api/index/function/bindCallback" },
    { "operator": "bindNodeCallback", "desc": "Convert a Node.js callback API to an observable.", "url": "https://rxjs.dev/api/index/function/bindNodeCallback" },
    { "operator": "defer", "desc": "Create an observable that’s not instantiated until it’s subscribed to.", "url": "https://rxjs.dev/api/index/function/defer" },
    { "operator": "empty", "desc": "Create an observable with no items.", "url": "https://rxjs.dev/api/index/function/empty" },
    { "operator": "from", "desc": "Create an observable from various sources like arrays, promises, etc.", "url": "https://rxjs.dev/api/index/function/from" },
    { "operator": "fromEvent", "desc": "Create an observable from DOM events.", "url": "https://rxjs.dev/api/index/function/fromEvent" },
    { "operator": "fromEventPattern", "desc": "Create an observable from any event pattern.", "url": "https://rxjs.dev/api/index/function/fromEventPattern" },
    { "operator": "generate", "desc": "Create an observable by emitting a sequence.", "url": "https://rxjs.dev/api/index/function/generate" },
    { "operator": "interval", "desc": "Create an observable that emits a sequence of numbers in a specified interval.", "url": "https://rxjs.dev/api/index/function/interval" },
    { "operator": "of", "desc": "Create an observable from a variable number of arguments.", "url": "https://rxjs.dev/api/index/function/of" },
    { "operator": "range", "desc": "Create an observable that emits a range of numbers.", "url": "https://rxjs.dev/api/index/function/range" },
    { "operator": "throwError", "desc": "Create an observable that emits an error.", "url": "https://rxjs.dev/api/index/function/throwError" },
    { "operator": "timer", "desc": "Create an observable that starts emitting after a specified delay.", "url": "https://rxjs.dev/api/index/function/timer" },
    { "operator": "iif", "desc": "Conditionally create an observable.", "url": "https://rxjs.dev/api/index/function/iif" }
  ],
  "Transformation Operators": [
    { "operator": "buffer", "desc": "Collect output values until provided observable emits, then emit as an array.", "url": "https://rxjs.dev/api/index/function/buffer" },
    { "operator": "bufferCount", "desc": "Collect and emit specified number of values.", "url": "https://rxjs.dev/api/index/function/bufferCount" },
    { "operator": "bufferTime", "desc": "Collect and emit values in specified time windows.", "url": "https://rxjs.dev/api/index/function/bufferTime" },
    { "operator": "bufferToggle", "desc": "Collect and emit values based on openings and closings.", "url": "https://rxjs.dev/api/index/function/bufferToggle" },
    { "operator": "bufferWhen", "desc": "Collect and emit values when closing selector emits.", "url": "https://rxjs.dev/api/index/function/bufferWhen" },
    { "operator": "concatMap", "desc": "Map values to inner observable, subscribe and emit in order.", "url": "https://rxjs.dev/api/index/function/concatMap" },
    { "operator": "concatMapTo", "desc": "Map each value to the same inner observable.", "url": "https://rxjs.dev/api/index/function/concatMapTo" },
    { "operator": "exhaustMap", "desc": "Map to inner observable, subscribe once (ignoring new values until completion).", "url": "https://rxjs.dev/api/index/function/exhaustMap" },
    { "operator": "expand", "desc": "Recursively map values into observables.", "url": "https://rxjs.dev/api/index/function/expand" },
    { "operator": "groupBy", "desc": "Group the items emitted by an observable according to a specified criterion.", "url": "https://rxjs.dev/api/index/function/groupBy" },
    { "operator": "map", "desc": "Apply a projection to each value and emit the resulting value.", "url": "https://rxjs.dev/api/index/function/map" },
    { "operator": "mapTo", "desc": "Map every value to the same value.", "url": "https://rxjs.dev/api/index/function/mapTo" },
    { "operator": "mergeMap (alias: flatMap)", "desc": "Map each value to an observable, subscribe, and emit all in parallel.", "url": "https://rxjs.dev/api/index/function/mergeMap" },
    { "operator": "mergeScan", "desc": "Map each value to an observable and merge in sequence.", "url": "https://rxjs.dev/api/index/function/mergeScan" },
    { "operator": "partition", "desc": "Split the values from an observable into two observables, one for values that satisfy a predicate and another for values that don't.", "url": "https://rxjs.dev/api/index/function/partition" },
    { "operator": "pluck", "desc": "Select a nested property from all values.", "url": "https://rxjs.dev/api/index/function/pluck" },
    { "operator": "scan", "desc": "Apply an accumulator function over the source observable and return each intermediate result.", "url": "https://rxjs.dev/api/index/function/scan" },
    { "operator": "switchMap", "desc": "Map each value to an observable, switch to the new observable on each emission.", "url": "https://rxjs.dev/api/index/function/switchMap" },
    { "operator": "switchMapTo", "desc": "Map each value to the same inner observable, switch to the new one on each emission.", "url": "https://rxjs.dev/api/index/function/switchMapTo" },
    { "operator": "window", "desc": "Collect and emit observable windows as observables.", "url": "https://rxjs.dev/api/index/function/window" },
    { "operator": "windowCount", "desc": "Collect and emit observable windows based on count.", "url": "https://rxjs.dev/api/index/function/windowCount" },
    { "operator": "windowTime", "desc": "Collect and emit observable windows based on time.", "url": "https://rxjs.dev/api/index/function/windowTime" },
    { "operator": "windowToggle", "desc": "Collect and emit observable windows based on openings and closings.", "url": "https://rxjs.dev/api/index/function/windowToggle" },
    { "operator": "windowWhen", "desc": "Collect and emit observable windows based on closing selector.", "url": "https://rxjs.dev/api/index/function/windowWhen" }
  ],
  "Filtering Operators": [
    { "operator": "audit", "desc": "Ignore emissions for a set duration, emit the most recent value afterwards.", "url": "https://rxjs.dev/api/index/function/audit" },
    { "operator": "auditTime", "desc": "Ignore emissions for a set duration, emit the most recent value afterwards.", "url": "https://rxjs.dev/api/index/function/auditTime" },
    { "operator": "debounce", "desc": "Emit the most recent value after a specified duration of silence.", "url": "https://rxjs.dev/api/index/function/debounce" },
    { "operator": "debounceTime", "desc": "Emit the most recent value after a specified duration of silence.", "url": "https://rxjs.dev/api/index/function/debounceTime" },
    { "operator": "distinct", "desc": "Emit values that are distinct based on a specified criteria.", "url": "https://rxjs.dev/api/index/function/distinct" },
    { "operator": "distinctUntilChanged", "desc": "Emit values if they are different from the last emitted value.", "url": "https://rxjs.dev/api/index/function/distinctUntilChanged" },
    { "operator": "distinctUntilKeyChanged", "desc": "Emit values if the key specified is different from the last emitted value.", "url": "https://rxjs.dev/api/index/function/distinctUntilKeyChanged" },
    { "operator": "elementAt", "desc": "Emit only the nth value from the source observable.", "url": "https://rxjs.dev/api/index/function/elementAt" },
    { "operator": "filter", "desc": "Emit values that pass the provided predicate function.", "url": "https://rxjs.dev/api/index/function/filter" },
    { "operator": "first", "desc": "Emit only the first value that passes some test or criterion.", "url": "https://rxjs.dev/api/index/function/first" },
    { "operator": "ignoreElements", "desc": "Ignore all values and only emit completion or error notifications.", "url": "https://rxjs.dev/api/index/function/ignoreElements" },
    { "operator": "last", "desc": "Emit only the last value that passes some test or criterion.", "url": "https://rxjs.dev/api/index/function/last" },
    { "operator": "sample", "desc": "Emit the most recent value in periodic time intervals.", "url": "https://rxjs.dev/api/index/function/sample" },
    { "operator": "sampleTime", "desc": "Emit the most recent value in periodic time intervals.", "url": "https://rxjs.dev/api/index/function/sampleTime" },
    { "operator": "single", "desc": "Emit only one value that matches the predicate or emit an error if multiple values match.", "url": "https://rxjs.dev/api/index/function/single" },
    { "operator": "skip", "desc": "Skip the first N values.", "url": "https://rxjs.dev/api/index/function/skip" },
    { "operator": "skipLast", "desc": "Skip the last N values.", "url": "https://rxjs.dev/api/index/function/skipLast" },
    { "operator": "skipUntil", "desc": "Skip values until another observable emits.", "url": "https://rxjs.dev/api/index/function/skipUntil" },
    { "operator": "skipWhile", "desc": "Skip values while a condition is true.", "url": "https://rxjs.dev/api/index/function/skipWhile" },
    { "operator": "take", "desc": "Take the first N values.", "url": "https://rxjs.dev/api/index/function/take" },
    { "operator": "takeLast", "desc": "Take the last N values.", "url": "https://rxjs.dev/api/index/function/takeLast" },
    { "operator": "takeUntil", "desc": "Take values until another observable emits.", "url": "https://rxjs.dev/api/index/function/takeUntil" },
    { "operator": "takeWhile", "desc": "Take values while a condition is true.", "url": "https://rxjs.dev/api/index/function/takeWhile" },
    { "operator": "throttle", "desc": "Emit the first value, then ignore for a specified duration.", "url": "https://rxjs.dev/api/index/function/throttle" },
    { "operator": "throttleTime", "desc": "Emit the first value, then ignore for a specified duration.", "url": "https://rxjs.dev/api/index/function/throttleTime" }
  ],
  "Combination Operators": [
    { "operator": "combineAll", "desc": "Collect and combine all observables once all have emitted.", "url": "https://rxjs.dev/api/index/function/combineAll" },
    { "operator": "combineLatest", "desc": "Combine the most recent values from multiple observables.", "url": "https://rxjs.dev/api/index/function/combineLatest" },
    { "operator": "concat", "desc": "Emit values sequentially from multiple observables, one after the previous completes.", "url": "https://rxjs.dev/api/index/function/concat" },
    { "operator": "concatAll", "desc": "Emit values from inner observables sequentially, one after the previous completes.", "url": "https://rxjs.dev/api/index/function/concatAll" },
    { "operator": "concatMap", "desc": "Map values to inner observable, subscribe and emit in order.", "url": "https://rxjs.dev/api/index/function/concatMap" },
    { "operator": "concatMapTo", "desc": "Map each value to the same inner observable.", "url": "https://rxjs.dev/api/index/function/concatMapTo" },
    { "operator": "exhaust", "desc": "Emit the first inner observable, ignore the rest until completion.", "url": "https://rxjs.dev/api/index/function/exhaust" },
    { "operator": "forkJoin", "desc": "Wait for all observables to complete and emit the last value from each.", "url": "https://rxjs.dev/api/index/function/forkJoin" },
    { "operator": "merge", "desc": "Merge multiple observables into one.", "url": "https://rxjs.dev/api/index/function/merge" },
    { "operator": "mergeAll", "desc": "Merge values from inner observables as they emit.", "url": "https://rxjs.dev/api/index/function/mergeAll" },
    { "operator": "mergeMap", "desc": "Map values to inner observables, merge and emit all.", "url": "https://rxjs.dev/api/index/function/mergeMap" },
    { "operator": "partition", "desc": "Split the values from an observable into two observables based on a predicate.", "url": "https://rxjs.dev/api/index/function/partition" },
    { "operator": "race", "desc": "Emit values from the first observable to emit, ignoring the rest.", "url": "https://rxjs.dev/api/index/function/race" },
    { "operator": "startWith", "desc": "Emit given values before emitting values from the source observable.", "url": "https://rxjs.dev/api/index/function/startWith" },
    { "operator": "withLatestFrom", "desc": "Combine each value from the source observable with the latest value from other observables.", "url": "https://rxjs.dev/api/index/function/withLatestFrom" },
    { "operator": "zip", "desc": "Combine values from multiple observables into pairs.", "url": "https://rxjs.dev/api/index/function/zip" }
  ],
  "Utility Operators": [
    { "operator": "tap", "desc": "Perform a side effect for every emission on the source observable.", "url": "https://rxjs.dev/api/index/function/tap" },
    { "operator": "delay", "desc": "Delay the emission of items by a given timeout or until a given date.", "url": "https://rxjs.dev/api/index/function/delay" },
    { "operator": "delayWhen", "desc": "Delay the emission of items until a second observable emits.", "url": "https://rxjs.dev/api/index/function/delayWhen" },
    { "operator": "dematerialize", "desc": "Convert notifications back into emitted values.", "url": "https://rxjs.dev/api/index/function/dematerialize" },
    { "operator": "finalize", "desc": "Perform a side effect when the observable completes or errors.", "url": "https://rxjs.dev/api/index/function/finalize" },
    { "operator": "observeOn", "desc": "Specify the scheduler on which an observable will operate.", "url": "https://rxjs.dev/api/index/function/observeOn" },
    { "operator": "subscribeOn", "desc": "Specify the scheduler on which subscription will happen.", "url": "https://rxjs.dev/api/index/function/subscribeOn" },
    { "operator": "timeInterval", "desc": "Emit the amount of time between emissions of consecutive values.", "url": "https://rxjs.dev/api/index/function/timeInterval" },
    { "operator": "timeout", "desc": "Throw an error if an observable does not emit within a specified time.", "url": "https://rxjs.dev/api/index/function/timeout" },
    { "operator": "timeoutWith", "desc": "Subscribe to a second observable if the first does not emit within a specified time.", "url": "https://rxjs.dev/api/index/function/timeoutWith" },
    { "operator": "timestamp", "desc": "Add a timestamp to each emitted value.", "url": "https://rxjs.dev/api/index/function/timestamp" },
    { "operator": "toArray", "desc": "Collect all values and emit them as an array.", "url": "https://rxjs.dev/api/index/function/toArray" }
  ],
  "Error Handling Operators": [
    { "operator": "catchError", "desc": "Handle errors by returning a new observable or throwing an error.", "url": "https://rxjs.dev/api/index/function/catchError" },
    { "operator": "retry", "desc": "Retry the source observable up to N times.", "url": "https://rxjs.dev/api/index/function/retry" },
    { "operator": "retryWhen", "desc": "Retry the source observable when a notifier observable emits.", "url": "https://rxjs.dev/api/index/function/retryWhen" }
  ],
  "Multicasting Operators": [
    { "operator": "multicast", "desc": "Share a single subscription with multiple subscribers using a subject.", "url": "https://rxjs.dev/api/index/function/multicast" },
    { "operator": "publish", "desc": "Make a cold observable hot by sharing a single subscription.", "url": "https://rxjs.dev/api/index/function/publish" },
    { "operator": "publishBehavior", "desc": "Like 'publish', but also initialize with a starting value.", "url": "https://rxjs.dev/api/index/function/publishBehavior" },
    { "operator": "publishLast", "desc": "Like 'publish', but only emit the last value when the observable completes.", "url": "https://rxjs.dev/api/index/function/publishLast" },
    { "operator": "publishReplay", "desc": "Like 'publish', but also replay a specified number of emissions.", "url": "https://rxjs.dev/api/index/function/publishReplay" },
    { "operator": "share", "desc": "Share a single subscription with multiple subscribers.", "url": "https://rxjs.dev/api/index/function/share" },
    { "operator": "shareReplay", "desc": "Like 'share', but also replay a specified number of emissions.", "url": "https://rxjs.dev/api/index/function/shareReplay" }
  ]
}
